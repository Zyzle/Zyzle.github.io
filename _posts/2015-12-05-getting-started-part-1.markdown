---
layout: post
title:  "Getting Started Part 1, Jekyll"
date:   2015-12-05 00:00:00
author: "Zyzle"
img: "20151206-getting-started-1/jekyll.jpg"
img_link: "https://en.wikipedia.org/wiki/Strange_Case_of_Dr_Jekyll_and_Mr_Hyde#/media/File:Dr_Jekyll_and_Mr_Hyde_poster_edit2.jpg"
img_license: ["cc", "by", "sa"]
tags: ["blog", "tools", "liquid", "ruby", "meta"]
comments: true
---

## My First Blog

Between my work as a software developer and the time I spend on my own little projects, (mostly fun ideas sitting unfinished but thats for another post), I come across some interesting and often baffling problems. So I decided to start keeping a blog of these little issues hopefully someone other than myself might find the information useful.

### Where to put this?

The answer to this one seemed simple, [Github Pages](https://pages.github.com/) seemed like the obvious choice. As a registered user on Github you can simply create a repository called **yourusername.github.io** and the contents of this repository's master branch will be available online at that address.  Github also offers this service for individual project repositories only the specially named `gh-pages` branch is used rather than master. Which leads me nicely on to...

### Which tool to use?

Another benefit of using Github pages is it's integration with the static site and blog generator tool [Jekyll](https://jekyllrb.com/).  Looking through the documentation this seemed exactly like the sort of tool I was looking for:

{: .post-list}
* The sites are automatically generated by Github whenever new content is pushed to master
* Posts can be written in [Markdown](https://daringfireball.net/projects/markdown/) plain text markup, great for versioning in git
* [Liquid](http://liquidmarkup.org/) template language is easy to use, syntax is similar to Jinja2/DTL

### Getting Started

Jekyll is written in Ruby and having never really used Ruby before my system (Ubuntu 15.04) seemed to contain a fairly basic setup. From past experience with Python and Node I know the best way to go with developing is to try and sandbox your environment.  

In Python I'd use *VirtualEnv* and *NVM* for Node so I hoped there was a similar tool available for Ruby. As it turns out there is [RVM](https://rvm.io/), this works similar to NVM in that it lets you have side by side versions of ruby installed, each with their own self contained gem sets.

Speaking of gem sets Github handily provides it's own set which contains all the supported plugins Github Jekyll pages have access to.

{% highlight bash %}
rvm use 2.2.3 # use Ruby version 2.2.3 for this console
gem install github-pages
{% endhighlight %}

So what does this give us? Well the list for the github-pages gem is [here](https://pages.github.com/versions/).  Lets be honest thats a pretty short list, I can understand why Github do this, for security reasons you cant have people running random bits of code on your servers, but it is rather limiting. There are a lot of useful plugins out there for Jekyll and it would be great to use them on the blog.  There are ways around this I could explore in future but for now my main concern is getting up and running.

Lets get started then, first checkout the repository and use this directory to setup Jekyll. The `--force` option is used with Jekyll because the repository directory (even on a brand new repository) won't be empty.

{% highlight bash %}
git clone git@github.com:Zyzle/zyzle.github.io.git
cd zyzle.github.io
jekyll new . --force
{% endhighlight %}

This will create the default Jekyll directory structure as well as the following example files:

{: .highlight }
```
.
├── _includes/
|   ├── footer.html
|   ├── head.html
|   ├── header.html
|   ├── icon-github.html
|   ├── icon-github.svg
|   ├── icon-twitter.html
|   └── icon-twitter.svg
├── _layouts/
|   ├── default.html
|   ├── page.html
|   └── post.html
├── _posts/
|   ├── 2015-12-05-welcome-to-jekyll.md
├── _sass/
|   ├── _base.scss
|   ├── _layout.scss
|   └── _syntax-highlighting.scss
├── css/
|   └── main.scss
├── _config.yml
├── about.md
├── feed.xml
└── index.html
```
Right here is everything you need to get up and running with the Jekyll blog.  You can view this with the Jekyll development server by running:

{% highlight bash %}
jekyll serve
{% endhighlight %}

You should be presented with something like this
![Jekyll Default Page](/images/20151206-getting-started-1/jekyll-new-site.jpg)

Jekyll gives us a nice simple template and a default post. You can see from the folder structure created above that blog posts are placed in the `_posts` directory. If you open up this default post in an editor you'll see it's comprised of a simple markdown file with some Jekyll "front matter".

Front matter in Jekyll simply a YAML block that Jekyll uses to mark the file as requiring processing in some way.  

{% highlight yaml %}
---
layout: post
title:  "Welcome to Jekyll!"
date:   2015-12-05 20:31:26 +0000
categories: jekyll update
---
{% endhighlight %}

Title, date, and categories should be fairly self explanatory, the `layout` option tells Jekyll which template should be used to render this content. You can find a more detailed look at the default front matter options for Jekyll [here](http://jekyllrb.com/docs/frontmatter/)

One thing I notice is missing from the default Jekyll generated site is the `_drafts` directory. As the name suggests this is where posts can be drafted and served while writing.  Create this directory in the root of the Jekyll project now and add a new post to it.

{% highlight bash %}
mkdir _drafts
touch _drafts/2015-12-06-my-second-post.md
{% endhighlight %}

Now open this newly created file in the editor of your choice and add the following front matter and contents

{% highlight text %}
---
layout: post
title:  "My Second Post!"
date:   2015-12-06 12:29:56 +0000
---

# My second post!

Some awesome post content.
{% endhighlight %}

**Note on the above:** I found while writing this post that Github's syntax highlighter can't handle `markdown` highlighting for the above code block one more reason I might choose to pre-compile Jekyll before pushing to Github.

Once you've done that start the Jekyll server with the `--watch` and `--drafts` options. These tell Jekyll to include the content of the `_drafts` folder as if they were published posts and to watch the files for changes and republish each time.

{% highlight bash %}
jekyll serve --watch --drafts
{% endhighlight %}

Now if you open your browser up to `http://localhost:4000` you should see your new post added to the top of the list like so

![Updated Front Page](/images/20151206-getting-started-1/updated_main.png)

Go ahead and click on the post title to see the content you added to the markdown:

![New Post](/images/20151206-getting-started-1/second_post.jpg)

You can go ahead and add some real content to the markdown file, save it and refresh your browser to see the changes you've made published. When you're happy with the final version of the post publishing it is as simple as moving it from the `_drafts` directory in to `_posts`.

### Publishing to Github

Once you're happy with the changes made the final step is to publish the content onto Github. As mentioned already Github publishes Jekyll content in the `master` branch. First make sure you're `.gitignore` file is setup to exclude the Jekyll build and temporary directories. By default you only need to worry about two:

{% highlight text %}
_site/
.sass-cache/
{% endhighlight %}

Now commit the rest to your local repository and push back to Github, remembering to move your new post into the `_posts` directory before you do.

{% highlight bash %}
mv _drafts/2015-12-06-my-second-post.md \
  _posts/2015-12-06-my-second-post.md
git add _posts/2015-12-06-my-second-post.md
git commit -a -m"new post time!"
git push origin
{% endhighlight %}

If you head on over to **yourusername.github.io** and you should see your post published.

In the second part of this series we'll look at Liquid templates and how Jekyll applies them to out pages. Check back soon for part 2.
